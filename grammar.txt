program             ->  declaration* EOF
                    |   "start" declaration* "stop"

declaration         ->  classDeclaration
                    |   variableDeclaration
                    |   statement

classDeclaration    ->  "class" IDENTIFIER "extends" IDENTIFIER
                            memberDeclaration* 
                        "endclass"
memberDeclaration   ->  ( ( "public" | "private" | "protected" ) variableDeclaration )*

variableDeclaration ->  ( "num" | "string" | "boolean" ) IDENTIFIER ( "=" expression )? ";"
                    |   functionDeclaration

functionDeclaration ->  ( "void" | "num" | "string" | "boolean" ) IDENTIFIER
                        "("parameters? ")" "=>" statement
                    |   ( "void" | "num" | "string" | "boolean" ) IDENTIFIER
                        "("parameters? ")" declaration* "endfunc"

statement           ->  expressionStatement
                    |   outputStatement
                    |   simpleBlock
                    |   curlBlock
                    |   ifStatement
                    |   whileStatement
                    |   forStatement
                    |   inputStatement

simpleBlock         ->  "block" declaration* "endblock"
curlBlock           ->  "{" declaration* "}"
ifStatement         ->  "if" "(" expression ")" "=>" statement
                    |   "if" "(" expression ")"
                            declaration*
                        ("elseif" declaration*)*
                        ("else" declaration*)?
                        "endif"
whileStatement      ->  "while" "(" expression ")" "=>" statement
                    ->  "while" "(" expression ")" declaration* "endwhile"
forStatement        ->  "for"
                            "(" ( variableDeclaration | expressionStatement | ";" )
                            expression? ";"
                            expression?
                        ")" "=>" statement
                    |   "for"
                            "(" ( variableDeclaration | expressionStatement | ";" )
                            expression? ";"
                            expression?
                        ")" declaration* "endfor"
outputStatement     ->  "output" expression ";"
inputStatement      ->  "input" IDENTIFIER ";"
expressionStatement ->  expression ";"

expression          ->  assignment
assignment          ->  "set" ( call "->" )? IDENTIFIER "=" assignment
                    |   logicOr
logicOr             ->  logicAnd ( "or" | "||" logicAnd )*
logicAnd            ->  logicEqual ( "and" | "&&" logicEqual )*
logicEqual          ->  comparison ( ( "!=" | "==" ) comparison )*
comparison          ->  term ( ( ">" | ">=" | "<" | "<=" ) term )*
term                ->  factor ( ( "+" | "-" ) factor )*
factor              ->  power ( ( "*" | "/" | "%" ) power )*
power               ->  unary ( "^" unary )*
unary               ->  ( "!" | "-" ) unary
                    |   prefix
prefix              ->  ( "++" | "--" ) prefix
                    |   postfix
postfix             ->  call ( "++" | "--" )*
call                ->  "new" primary "(" arguments* ")"
                    |   primary ( "(" arguments ")" )*
primary             ->  literal | grouping | IDENTIFIER

grouping            ->  "(" expression ")"
literal             ->  NUMBER | STRING | BOOLEAN | "this"
operator            ->  "==" | "!=" | ">" | ">=" | "<" | "<="
                    |   "+" | "-" | "*" | "/" | "%" | "^"
                    |   "."